Django Notes:

note to be in the right directory and have django env activated.

New Project: django-admin startproject project_name

create app inside project: python manage.py startapp app_name

run django project on server: python manage.py runserver

Process: create project -> create app -> create views (return HttpResponse)
          -> urls (import views from app_file) (add url / path to urlpatterns)
          ->settings.py (add app_file in INSTALLED_APPS)
          -> runserver with python manage.py runserver

          practice adding urls.py for each app. where project's urls.py will have this shape
          from django.contrib import admin
          from django.urls import path, include

          urlpatterns = [
              path('help/', include("AppTwo.urls")),
              path('admin/', admin.site.urls),
          ]

          -> and the shape of urls.py in the app folder will look like this:
          from django.urls import path
          from AppTwo import views

          urlpatterns = [
              path('', views.help, name='help'),
          ]

Templates: Create a templates folder inside your project folder. Inside the settings.py
            create the TEMPLATE_DIR by joining the BASE_DIR and 'templates' using pathlib
            -> BASE_DIR = Path(__file__).resolve().parent.parent
            ->TEMPLATE_DIR = Path.joinpath(BASE_DIR, 'templates')
            Now, inside the settings.py file go to the TEMPLATES -> DIRS and
            put the directory for templates folder which is TEMPLATE_DIR.

            Inside the templates folder create folders for each apps and then a html file inside app folder to make it more modular. put a template tag in the body
            -> {{insert_me}}
            Now, in the views.py in the app_name folder, edit the fucntion with this code
            -> def index(request):
                my_dict = {'insert_me':"Hello I am from views.py"}
                return render(request,'app_name/index.html',context=my_dict)

Static File in Django:
            create a static folder in the project folder.  create images folder inside the
            static folder. Configure the directories in the settings.py like the template folder.
            By scrolling down in settings.py you will see STATIC_URL = 'static/'. Under this
            create a list STATICFILES_DIRS = [ STATIC_DIR, ].
            ->STATIC_DIR = Path.joinpath('BASE_DIR', 'static')
            Inside the html file do this under DOCTYPE
            -> {% load static %}
            and do this to render the image stored in static/Images
            -> <img src="{% static "images/cr7.jpg" %}" alt="Uh Oh, didn't show!">
            static files can be any files that don't change like css and html files as well not just Images

MODELS:
# Models are Basically database tables. to create a database table we have to create a model and
# Model is created using the class key word and inheret from the parent class models.model
in the models folder inside the app folder import models from django.db
We have to create the models and django takes care of creating the SQL code to create those models/tables in the database
After the models are created, run command -> python manage.py migrate.
Once the migration is applied, run -> python manage.py makemigrations app_name
Once done with this and see things like create model and stuff, then run -> python manage.py migrate

Run -> python manage.py shell command it opens command like python
you can access all objects inside the model with model_name.objects.all() example: Topic.objects.all()
to save a topic in the model type t = Topic(top_name="Social Network") then do t.save() this will be saved in the
QuerySet. quit() to get out of python shell

We can also edit the QuerySet using admin interface of Django.
Inside app_folder/admin.py, import the models and then register them
-> admin.site.register(model_name)

In order to use admin interface we have to create a super user: run command inside the project folder
-> python manage.py createsuperuser
give a username, password and email

run the server goto the browser and then /admin will take you to admin interface.

--->any additions or changes you make in models folder run makemigration command and then migrate command

Populating Script using the Faker Library:
  Create a file named populate_app_name.py and write the code to populate the models inside this files
  do the below imports in this file:
          import os
          os.environ.setdefault('DJANGO_SETTINGS_MODULE','first_project.settings')

          import django
          django.setup()

          # FAKE POP Script
          import random
          from first_app.models import AccessRecord, WebPage, Topic (importing the models from app.models)
          from faker import Faker
  ***Reference the populate.py file in the first project for notes*** that populates the data to the Models
  once, done with the code run the populate.py folder and once the script is populated run the runserver
  go to the /admin page and check the populated data for those models in the admin interface of Django
==========================================================================================================

  MTV Model Template Views Paradigm:
  First: In the views.py file we import any models that we will need to use
  Second: Use the View to query the model for data that we will need
  Third: Pass Results from the model to the templates
  Fourth: Edit the template so that it is ready to accept and display the data from the model.
  Fifth: Map a URL to the View.
===========================================================================================================
  DJANGO FORMS:
  Create a forms folder inside the app_name folder
  
